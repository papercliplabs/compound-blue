import { describe, expect, vi } from "vitest";
import { test } from "../../setup";
import { prepareMarketLeveragedBorrowAction } from "@/actions/prepareMarketLeverageBorrowAction";
import { MarketId, MathLib } from "@morpho-org/blue-sdk";
import { Address, maxUint256, parseEther } from "viem";
import { AnvilTestClient } from "@morpho-org/test";
import { expectZeroErc20Balances, getErc20BalanceOf } from "../../helpers/erc20";
import { getMorphoMarketPosition } from "../../helpers/morpho";
import { GetParaswapReturnType } from "@/data/paraswap/types";
import { fetchMarket } from "@morpho-org/blue-sdk-viem";
import { getParaswapExactBuy } from "@/data/paraswap/getParaswapExactBuy";
import {
  BUNDLER3_ADDRESS,
  GENERAL_ADAPTER_1_ADDRESS,
  PARASWAP_ADAPTER_ADDRESS,
  SUPPORTED_ADDAPTERS,
} from "@/utils/constants";
import { expectOnlyAllowedApprovals } from "../../helpers/logs";
import {
  USDC_ADDRESS,
  WETH_ADDRESS,
  WETH_USDC_MARKET_ALLOCATING_VAULT_ADDRESS,
  WETH_USDC_MARKET_ID,
} from "../../helpers/constants";
import { executeAction } from "../../helpers/executeAction";

vi.mock("@/data/paraswap/getParaswapExactBuy");

interface MarketLeveragedBorrowTestParameters {
  client: AnvilTestClient;
  marketId: MarketId;
  allocatingVaultAddresses: Address[];

  initialCollateralAmount: bigint;
  leverageFactor: number;
  maxSlippageTolerance: number;

  collateralDealAmount: bigint;

  beforeExecutionCb?: (client: AnvilTestClient) => Promise<void>;
  callerType?: "eoa" | "contract";
  blockNumber: bigint;
  mockParaswapQuote: GetParaswapReturnType;
}

async function runMarketLeveragedBorrowTest({
  client,
  marketId,

  allocatingVaultAddresses,
  initialCollateralAmount,
  leverageFactor,
  maxSlippageTolerance,

  collateralDealAmount = initialCollateralAmount,
  beforeExecutionCb,
  callerType,
  blockNumber,
  mockParaswapQuote,
}: MarketLeveragedBorrowTestParameters) {
  // Arrange
  const market = await fetchMarket(marketId, client);
  const { loanToken: loanTokenAddress, collateralToken: collateralTokenAddress } = market.params;

  if (callerType === "contract") {
    await client.setCode({ address: client.account.address, bytecode: "0x60006000fd" });
  }

  await client.reset({ blockNumber });

  client.deal({ erc20: collateralTokenAddress, amount: collateralDealAmount });

  vi.mocked(getParaswapExactBuy).mockReturnValue(new Promise((resolve) => resolve(mockParaswapQuote)));

  // Act
  const action = await prepareMarketLeveragedBorrowAction({
    publicClient: client,
    marketId,
    allocatingVaultAddresses,

    accountAddress: client.account.address,

    initialCollateralAmount,
    leverageFactor,
    maxSlippageTolerance,
  });
  await beforeExecutionCb?.(client);
  const logs = await executeAction(client, action);

  // Assert
  await expectOnlyAllowedApprovals(client, logs, client.account.address); // Make sure doesn't approve or permit anything unexpected

  const { collateralBalance: positionCollateralBalance, loanBalance: positionLoanBalance } =
    await getMorphoMarketPosition(client, marketId, client.account.address);
  const walletCollateralBalance = await getErc20BalanceOf(client, collateralTokenAddress, client.account.address);

  const initialCollateralInternal =
    initialCollateralAmount == maxUint256 ? collateralDealAmount : initialCollateralAmount;

  const finalCollateralAmount = MathLib.mulDivUp(
    initialCollateralInternal,
    BigInt(leverageFactor * 10000),
    BigInt(10000)
  );

  expect(walletCollateralBalance).toBe(collateralDealAmount - initialCollateralInternal);
  expect(positionCollateralBalance).toBe(finalCollateralAmount);

  const borrowAmount = market.getCollateralValue(finalCollateralAmount - initialCollateralInternal)!;
  const maxBorrowAmount = MathLib.mulDivUp(borrowAmount, BigInt((1 + maxSlippageTolerance) * 100000), 100000n);

  expect(positionLoanBalance).toBeLessThanOrEqual(maxBorrowAmount);

  await expectZeroErc20Balances(client, [BUNDLER3_ADDRESS, ...SUPPORTED_ADDAPTERS], loanTokenAddress);
  await expectZeroErc20Balances(client, [BUNDLER3_ADDRESS, ...SUPPORTED_ADDAPTERS], collateralTokenAddress);
}

const successTestCases: ({ name: string } & Omit<MarketLeveragedBorrowTestParameters, "client">)[] = [
  {
    name: "leverage with partial wallet balance collateral",
    marketId: WETH_USDC_MARKET_ID,
    allocatingVaultAddresses: WETH_USDC_MARKET_ALLOCATING_VAULT_ADDRESS,

    initialCollateralAmount: parseEther("1"),
    leverageFactor: 2.1,
    maxSlippageTolerance: 0.05,

    collateralDealAmount: parseEther("2"),
    blockNumber: BigInt(71054272),
    mockParaswapQuote: {
      augustus: "0x6A000F20005980200259B80c5102003040001068",
      calldata:
        "0x7f457675000000000000000000000000a0f408a000017007015e0f00320e470d00090a5b0000000000000000000000003c499c542cef5e3811e1192ce70d8cc03d5c33590000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000007db312980000000000000000000000000000000000000000000000000f43fc2c04ee00000000000000000000000000000000000000000000000000000000000077ba6787c5eecb3f74a940a6a10f929d4057adc1000000000000000000000000043c362e0000000000000000000000000000000000000000000000000000000000000000cc3e7c85bb0ee4f09380e041fee95a0caedd4a0294000000000000000000000000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000052000000160000000000000000000000120000000000000013700000000000015e0e592427a0aece92de3edee1f18e0157c058615640140008400a400000000000300000000000000000000000000000000000000000000000000000000f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000006a000f20005980200259b80c510200304000106800000000000000000000000000000000000000000000000000000000681f197c000000000000000000000000000000000000000000000000088c78bc7da4000000000000000000000000000000000000000000000000000000000000430be261000000000000000000000000000000000000000000000000000000000000002b7ceb23fd6bc0add59e62ac25578270cff1b9f6190001f43c499c542cef5e3811e1192ce70d8cc03d5c335900000000000000000000000000000000000000000000000180000000000000000000000120000000000000014e0000000000000bb8e592427a0aece92de3edee1f18e0157c058615640160008400a400000000000300000000000000000000000000000000000000000000000000000000f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000006a000f20005980200259b80c510200304000106800000000000000000000000000000000000000000000000000000000681f197c0000000000000000000000000000000000000000000000000494654067e100000000000000000000000000000000000000000000000000000000000023eb23b800000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f42791bca1f2de4661ed88a30c99a7a9449aa841740000643c499c542cef5e3811e1192ce70d8cc03d5c335900000000000000000000000000000000000000000000000000000000000000000180000000000000000000000120000000000000014e0000000000000578e592427a0aece92de3edee1f18e0157c058615640160008400a400000000000300000000000000000000000000000000000000000000000000000000f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000006a000f20005980200259b80c510200304000106800000000000000000000000000000000000000000000000000000000681f197c00000000000000000000000000000000000000000000000002231e2f1f6900000000000000000000000000000000000000000000000000000000000010c3616e00000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f4c2132d05d31c914a87c6611c10748aeb04b58e8f0000643c499c542cef5e3811e1192ce70d8cc03d5c3359000000000000000000000000000000000000000000000000000000000000",
      offsets: {
        exactAmount: BigInt(132n),
        limitAmount: BigInt(100n),
        quotedAmount: BigInt(164n),
      },
    },
  },
  {
    name: "leverage with full wallet balance collateral",
    marketId: WETH_USDC_MARKET_ID,
    allocatingVaultAddresses: WETH_USDC_MARKET_ALLOCATING_VAULT_ADDRESS,

    initialCollateralAmount: maxUint256,
    leverageFactor: 4.1,
    maxSlippageTolerance: 0.05,

    collateralDealAmount: parseEther("2"),
    blockNumber: BigInt(71054272),
    mockParaswapQuote: {
      augustus: "0x6A000F20005980200259B80c5102003040001068",
      calldata:
        "0x7f457675000000000000000000000000a0f408a000017007015e0f00320e470d00090a5b0000000000000000000000003c499c542cef5e3811e1192ce70d8cc03d5c33590000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000002c47cf470000000000000000000000000000000000000000000000000560ad326a76c000000000000000000000000000000000000000000000000000000000002a48ff679bffc84753d70422f97ac563612a78186000000000000000000000000043c36980000000000000000000000000000000000000000000000000000000000000000cc3e7c85bb0ee4f09380e041fee95a0caedd4a029400000000000000000000000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000840000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000008600000016000000000000000000000012000000000000001370000000000000fa0e592427a0aece92de3edee1f18e0157c058615640140008400a400000000000300000000000000000000000000000000000000000000000000000000f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000006a000f20005980200259b80c510200304000106800000000000000000000000000000000000000000000000000000000681f1a5d000000000000000000000000000000000000000000000000226abadc42f80000000000000000000000000000000000000000000000000000000000010e99d3ff000000000000000000000000000000000000000000000000000000000000002b7ceb23fd6bc0add59e62ac25578270cff1b9f6190001f43c499c542cef5e3811e1192ce70d8cc03d5c335900000000000000000000000000000000000000000000000180000000000000000000000120000000000000014e0000000000000898e592427a0aece92de3edee1f18e0157c058615640160008400a400000000000300000000000000000000000000000000000000000000000000000000f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000006a000f20005980200259b80c510200304000106800000000000000000000000000000000000000000000000000000000681f1a5d00000000000000000000000000000000000000000000000012ede6c5f1a200000000000000000000000000000000000000000000000000000000000094da3b9900000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f42791bca1f2de4661ed88a30c99a7a9449aa841740000643c499c542cef5e3811e1192ce70d8cc03d5c335900000000000000000000000000000000000000000000000000000000000000000180000000000000000000000120000000000000014e00000000000004b0e592427a0aece92de3edee1f18e0157c058615640160008400a400000000000300000000000000000000000000000000000000000000000000000000f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000006a000f20005980200259b80c510200304000106800000000000000000000000000000000000000000000000000000000681f1a5d0000000000000000000000000000000000000000000000000a53380ee0e4000000000000000000000000000000000000000000000000000000000000513341ac00000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f4c2132d05d31c914a87c6611c10748aeb04b58e8f0000643c499c542cef5e3811e1192ce70d8cc03d5c335900000000000000000000000000000000000000000000000000000000000000000180000000000000000000000120000000000000014e0000000000000960e592427a0aece92de3edee1f18e0157c058615640160008400a400000000000300000000000000000000000000000000000000000000000000000000f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000006a000f20005980200259b80c510200304000106800000000000000000000000000000000000000000000000000000000681f1a5d00000000000000000000000000000000000000000000000014a6701dc1c8000000000000000000000000000000000000000000000000000000000000a25bf03f00000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd60001f43c499c542cef5e3811e1192ce70d8cc03d5c335900000000000000000000000000000000000000000000000000000000000000000180000000000000000000000120000000000000014e00000000000000c8e592427a0aece92de3edee1f18e0157c058615640160008400a400000000000300000000000000000000000000000000000000000000000000000000f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000006a000f20005980200259b80c510200304000106800000000000000000000000000000000000000000000000000000000681f1a5d00000000000000000000000000000000000000000000000001b88957d0260000000000000000000000000000000000000000000000000000000000000d8cb4f600000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f4d6df932a45c0f255f85145f286ea0b292b21c90b000bb83c499c542cef5e3811e1192ce70d8cc03d5c3359000000000000000000000000000000000000000000000000000000000000",
      offsets: {
        exactAmount: BigInt(132n),
        limitAmount: BigInt(100n),
        quotedAmount: BigInt(164n),
      },
    },
  },
];

describe("prepareMarketLeveragedBorrowAction", () => {
  describe("happy path", () => {
    successTestCases.map((testCase) => {
      test(testCase.name + " - eoa caller", async ({ client }) => {
        await runMarketLeveragedBorrowTest({
          client,
          ...testCase,
          callerType: "eoa",
        });
      });
    });

    successTestCases.map((testCase) => {
      test(testCase.name + " - contract caller", async ({ client }) => {
        await runMarketLeveragedBorrowTest({
          client,
          ...testCase,
          callerType: "contract",
        });
      });
    });
  });

  describe("sad path", () => {
    test("prepare error when leverage factor < 1", async ({ client }) => {
      const action = await prepareMarketLeveragedBorrowAction({
        publicClient: client,
        marketId: WETH_USDC_MARKET_ID,
        allocatingVaultAddresses: WETH_USDC_MARKET_ALLOCATING_VAULT_ADDRESS,

        accountAddress: client.account.address,

        initialCollateralAmount: parseEther("1"),
        leverageFactor: 0.9,
        maxSlippageTolerance: 0.05,
      });
      expect(action.status).toEqual("error");
    });
    test("prepare error when slippage tolerance is too large", async ({ client }) => {
      const action = await prepareMarketLeveragedBorrowAction({
        publicClient: client,
        marketId: WETH_USDC_MARKET_ID,
        allocatingVaultAddresses: WETH_USDC_MARKET_ALLOCATING_VAULT_ADDRESS,

        accountAddress: client.account.address,

        initialCollateralAmount: parseEther("1"),
        leverageFactor: 1.4,
        maxSlippageTolerance: 1.2,
      });
      expect(action.status).toEqual("error");
    });
    test("prepare error when leverage factor is too large", async ({ client }) => {
      const action = await prepareMarketLeveragedBorrowAction({
        publicClient: client,
        marketId: WETH_USDC_MARKET_ID,
        allocatingVaultAddresses: WETH_USDC_MARKET_ALLOCATING_VAULT_ADDRESS,

        accountAddress: client.account.address,

        initialCollateralAmount: parseEther("1"),
        leverageFactor: 20,
        maxSlippageTolerance: 0.05,
      });
      expect(action.status).toEqual("error");
    });
  });
});
